#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import requests
import re
import subprocess
from datetime import datetime
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

# –ü—É—Ç–∏ –∫ Hugo –ø—Ä–æ–µ–∫—Ç—É
HUGO_PROJECT_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)))
CONTENT_POST_PATH = os.path.join(HUGO_PROJECT_PATH, 'content', 'post')
PUBLIC_IMAGES_PATH = os.path.join(HUGO_PROJECT_PATH, 'public', 'images')
PLAN_FILE_PATH = os.path.join(HUGO_PROJECT_PATH, 'content', 'plan.md')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(CONTENT_POST_PATH, exist_ok=True)
os.makedirs(PUBLIC_IMAGES_PATH, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotStates:
    MAIN_MENU = 'main_menu'
    CREATE_POST = 'create_post'
    POST_TEXT = 'post_text'
    POST_PHOTO = 'post_photo'
    POST_VIDEO = 'post_video'
    POST_YOUTUBE = 'post_youtube'
    POST_LOCATION = 'post_location'
    TRAVEL_CALENDAR = 'travel_calendar'
    TRAVEL_TEXT = 'travel_text'
    TRAVEL_PHOTO = 'travel_photo'
    POST_LOCATION_NAME = 'post_location_name'
    POST_DESCRIPTION = 'post_description'
    CALENDAR_MANAGE = 'calendar_manage'
    CALENDAR_ADD_MONTH = 'calendar_add_month'
    CALENDAR_ADD_SPECIAL = 'calendar_add_special'
    CALENDAR_REMOVE = 'calendar_remove'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_data(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def generate_post_slug(title, date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Hugo"""
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'[^\w\s-]', '', title.lower())
    slug = re.sub(r'[-\s]+', '-', slug).strip('-')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
    date_str = date.strftime('%Y%m%d')
    
    # –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É
    if not slug:
        slug = f"post-{date_str}"
    else:
        slug = f"{slug}-{date_str}"
    
    return slug

def download_telegram_file(file_id, file_name, context):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram"""
    try:
        file = context.bot.get_file(file_id)
        file_path = os.path.join(PUBLIC_IMAGES_PATH, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = requests.get(file.file_path)
        with open(file_path, 'wb') as f:
            f.write(response.content)
        
        return f"images/{file_name}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def create_hugo_post(post_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Hugo"""
    try:
        # –°–æ–∑–¥–∞–µ–º slug –∏ –∏–º—è —Ñ–∞–π–ª–∞
        post_date = datetime.now()
        post_slug = generate_post_slug(post_data.get('title', '–ù–æ–≤—ã–π –ø–æ—Å—Ç'), post_date)
        file_name = f"{post_slug}.md"
        file_path = os.path.join(CONTENT_POST_PATH, file_name)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º front matter
        front_matter = f"""+++
title = '{post_data.get('title', '–ù–æ–≤—ã–π –ø–æ—Å—Ç')}'
slug = '{post_slug}'
date = "{post_date.strftime('%Y-%m-%dT%H:%M:%S')}"
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if post_data.get('description'):
            front_matter += f"description = '{post_data['description']}'\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if post_data.get('main_image'):
            front_matter += f"image = '{post_data['main_image']}'\n"
        
        front_matter += "+++\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        content = post_data.get('text', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≥–∞–ª–µ—Ä–µ—é
        if post_data.get('photos'):
            if len(post_data['photos']) > 1:
                content += "\n\n## –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
                content += "{{< gallery dir=\"/images/\" />}}\n"
            elif len(post_data['photos']) == 1:
                # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Ç–æ –æ–Ω–∞ —É–∂–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ main_image –≤ front matter
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º YouTube –≤–∏–¥–µ–æ
        if post_data.get('youtube_links'):
            content += "\n\n## –í–∏–¥–µ–æ\n\n"
            for link in post_data['youtube_links']:
                video_id = extract_youtube_id(link)
                if video_id:
                    content += f'{{< youtube {video_id} >}}\n\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
        if post_data.get('locations'):
            content += "\n\n## –õ–æ–∫–∞—Ü–∏–∏\n\n"
            for location in post_data['locations']:
                content += f"üìç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({location})\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –Ω–∞–≤–µ—Ä—Ö"
        content += "\n{{< rawhtml >}}\n{{< back-to-top >}}\n{{< /rawhtml >}}\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(front_matter + content)
        
        return file_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return None

def extract_youtube_id(url):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL"""
    patterns = [
        r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([^&\n?#]+)',
        r'youtube\.com/watch\?.*v=([^&\n?#]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    return None

def add_travel_calendar_entry(entry_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª plan.md
        with open(PLAN_FILE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
        calendar_end = content.find('</script>')
        if calendar_end == -1:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        new_entry = f"\n\n---\n\n### üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
        new_entry += f"**{entry_data.get('title', '–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞')}**\n\n"
        new_entry += entry_data.get('text', '') + "\n\n"
        
        if entry_data.get('photo'):
            new_entry += f"![–§–æ—Ç–æ –ø–æ–µ–∑–¥–∫–∏]({entry_data['photo']})\n\n"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        insert_position = content.find('\n\n–ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?')
        if insert_position != -1:
            content = content[:insert_position] + new_entry + content[insert_position:]
        else:
            content += new_entry
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(PLAN_FILE_PATH, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
        return False

def get_current_travel_options():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ–ø—Ü–∏–π –ø–æ–µ–∑–¥–æ–∫ –∏–∑ plan.md"""
    try:
        with open(PLAN_FILE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é select —Å –æ–ø—Ü–∏—è–º–∏
        select_start = content.find('<select id="trip_period" name="trip_period">')
        select_end = content.find('</select>')
        
        if select_start == -1 or select_end == -1:
            return []
        
        select_content = content[select_start:select_end]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏
        import re
        options = re.findall(r'<option value="([^"]*)"[^>]*>([^<]*)</option>', select_content)
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –æ–ø—Ü–∏–∏ –∏ –∏—Å–∫–ª—é—á–∞–µ–º "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ë–í–°"
        filtered_options = [(value, text) for value, text in options 
                          if value and text and value != "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ë–í–°"]
        
        return filtered_options
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ–ø—Ü–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return []

def add_travel_option(option_text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –≤ plan.md"""
    try:
        with open(PLAN_FILE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏ (–ø–µ—Ä–µ–¥ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ë–í–°")
        target = '<option value="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ë–í–°">–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ë–í–°</option>'
        target_pos = content.find(target)
        
        if target_pos == -1:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø—Ü–∏—é
        new_option = f'                <option value="{option_text}">{option_text}</option>\n                '
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø—Ü–∏—é
        new_content = content[:target_pos] + new_option + content[target_pos:]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(PLAN_FILE_PATH, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")
        return False

def remove_travel_option(option_text):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ plan.md"""
    try:
        with open(PLAN_FILE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ–ø—Ü–∏—é
        pattern = f'                <option value="{re.escape(option_text)}">{re.escape(option_text)}</option>\n'
        new_content = re.sub(pattern, '', content)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        if new_content == content:
            pattern = f'<option value="{re.escape(option_text)}">{re.escape(option_text)}</option>'
            new_content = re.sub(pattern + r'\s*', '', content)
        
        if new_content != content:
            with open(PLAN_FILE_PATH, 'w', encoding='utf-8') as f:
                f.write(new_content)
            return True
        else:
            return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")
        return False

def run_git_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Git –∫–æ–º–∞–Ω–¥—ã"""
    try:
        if cwd is None:
            cwd = HUGO_PROJECT_PATH
        
        result = subprocess.run(
            command, 
            shell=True, 
            cwd=cwd,
            capture_output=True, 
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            logger.info(f"Git –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
            return True, result.stdout
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Git –∫–æ–º–∞–Ω–¥—ã: {command}, {result.stderr}")
            return False, result.stderr
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç Git –∫–æ–º–∞–Ω–¥—ã: {command}")
        return False, "Timeout"
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Git –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False, str(e)

def git_add_commit_push(files, commit_message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∫–æ–º–º–∏—Ç –∏ –ø—É—à —Ñ–∞–π–ª–æ–≤ –≤ Git"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file_path in files:
            success, output = run_git_command(f"git add \"{file_path}\"")
            if not success:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {output}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        success, output = run_git_command(f"git commit -m \"{commit_message}\"")
        if not success:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞: {output}"
        
        # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, output = run_git_command("git push")
        if not success:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ: {output}"
        
        return True, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return False, str(e)

def transliterate_city_name(city_name):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    known_cities = {
        '–º–æ—Å–∫–≤–∞': 'Moscow',
        '–ø–∏—Ç–µ—Ä': 'Piter',
        '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'Piter',
        '—Å–ø–±': 'Piter',
        '—Ç—É–ª–∞': 'Tula',
        '—Ç–≤–µ—Ä—å': 'Tver',
        '—è—Ä–æ—Å–ª–∞–≤–ª—å': 'Yaroslavl',
        '–≤–ª–∞–¥–∏–º–∏—Ä': 'Vladimir',
        '—Å–µ—Ä–ø—É—Ö–æ–≤': 'Serpuhov',
        '–¥–º–∏—Ç—Ä–æ–≤': 'Dmitrov',
        '–∫–∞–ª—è–∑–∏–Ω': 'Kalyazin',
        '–∫–∞–≤–∫–∞–∑': 'Kavkaz',
        '–º—É—Ä–º–∞–Ω—Å–∫': 'Murmansk',
        '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 'Kaliningrad',
        '–∫–±—Ä': 'KBR',
        '–∫–∞–±–∞—Ä–¥–∏–Ω–æ-–±–∞–ª–∫–∞—Ä–∏—è': 'KBR',
        '–ø–æ–∫—Ä–æ–≤': 'Pokrov',
        '—Å–µ—Ä–≥–∏–µ–≤': 'Sergiev',
        '—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥': 'Sergiev',
        '—Ä–æ—Å—Ç–æ–≤': 'Rostov',
        '—Ä—è–∑–∞–Ω—å': 'Ryazan',
        '—Å–ø–∏—Ä–æ–≤–æ': 'Spirovo',
        '–∞–ª–µ–∫—Å–∏–Ω': 'Aleksin',
        '–∞–ª—Ç–∞–π': 'Altai',
        '–∫–ª–∏–Ω': 'Klin',
        '–∫–æ–ª–æ–º–Ω–∞': 'Kolomna',
        '–º–æ–∂–∞–π—Å–∫': 'Mojaisk',
        '–¥—É–±–Ω–∞': 'Dubna',
        '–∫–∞—à–∏—Ä–∞': 'Kashira',
        '–≤–æ–ª–æ–∫–æ–ª–∞–º—Å–∫': 'Volok',
        '–µ–ª–∫–∏-–ø–∞–ª–∫–∏': 'Elki-palki',
        '–±–µ–ª–æ–º–æ—Ä—Å–∫': 'Belayagora',
        '—Ä–∂–µ–≤': 'Rzhev',
        '—Ä–∂–µ–≤': 'Rzhev'
    }
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    city_lower = city_name.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    if city_lower in known_cities:
        return known_cities[city_lower]
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        ' ': '', '-': '', '_': ''
    }
    
    result = ''
    for char in city_lower:
        if char in translit_dict:
            result += translit_dict[char]
        elif char.isalpha():
            result += char
    
    # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
    return result.capitalize() if result else 'Unknown'

def generate_image_filename(location, date, image_number, extension='jpg'):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ö–µ–º–µ Location-YYYYMMDD-N.ext"""
    date_str = date.strftime('%Y%m%d')
    location_latin = transliterate_city_name(location)
    return f"{location_latin}-{date_str}-{image_number}.{extension}"

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton("üåç –•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å")],
        [KeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_post_creation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="post_photo")],
        [InlineKeyboardButton("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="post_video")],
        [InlineKeyboardButton("üîó YouTube —Å—Å—ã–ª–∫–∞", callback_data="post_youtube")],
        [InlineKeyboardButton("üìç –õ–æ–∫–∞—Ü–∏—è (–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã)", callback_data="post_location")],
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="publish_post")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_photo_quality_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_post")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_calendar_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–µ–∑–¥–∫—É", callback_data="calendar_add_monthly")],
        [InlineKeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–µ–∑–¥–∫—É", callback_data="calendar_add_special")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="calendar_remove")],
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="calendar_list")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = BotStates.MAIN_MENU
    user_data[user_id] = {}
    
    welcome_text = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å–∞–π—Ç \"–ü–æ–∫–∞ —Ç—ã —Å–ø–∞–ª\"!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        user_states[user_id] = BotStates.CREATE_POST
        user_data[user_id] = {
            'type': 'post',
            'title': '',
            'description': '',
            'location': '',
            'text': '',
            'photos': [],
            'videos': [],
            'youtube_links': [],
            'locations': [],
            'main_image': None
        }
        
        await update.message.reply_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è Hugo —Å–∞–π—Ç–∞\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:",
            reply_markup=None
        )
        user_states[user_id] = BotStates.POST_DESCRIPTION
        
    elif text == "üåç –•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å":
        user_states[user_id] = BotStates.TRAVEL_CALENDAR
        user_data[user_id] = {
            'type': 'travel',
            'title': '',
            'text': '',
            'photo': None
        }
        
        await update.message.reply_text(
            "üåç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏:",
            reply_markup=None
        )
        user_states[user_id] = BotStates.TRAVEL_TEXT
        
    elif text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º":
        user_states[user_id] = BotStates.CALENDAR_MANAGE
        await update.message.reply_text(
            "üìÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º –ø–æ–µ–∑–¥–æ–∫**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_calendar_management_keyboard()
        )

async def handle_post_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if not user_data[user_id].get('title'):
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
        user_data[user_id]['title'] = text
        await update.message.reply_text(
            f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é (1-2 —Å–ª–æ–≤–∞):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—Ö–æ–¥, –≠–∫—Å–∫—É—Ä—Å–∏—è, –û—Ç–¥—ã—Ö, –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ..."
        )
    elif not user_data[user_id].get('description'):
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ
        user_data[user_id]['description'] = text
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–≥–æ—Ä–æ–¥ –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º):\n"
            "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ü–∏—Ç–µ—Ä, –ê–ª—Ç–∞–π, –ö–∞–≤–∫–∞–∑, –¢—É–ª–∞..."
        )
        user_states[user_id] = BotStates.POST_LOCATION_NAME

async def handle_post_location_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ª–æ–∫–∞—Ü–∏—è
    user_data[user_id]['location'] = text
    location_latin = transliterate_city_name(text)
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text} ‚Üí {location_latin}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"
    )
    user_states[user_id] = BotStates.POST_TEXT
    
async def handle_post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    user_data[user_id]['text'] = text
    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {user_data[user_id]['title']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {user_data[user_id]['description']}\n"
        f"üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_data[user_id]['location']}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
        reply_markup=get_post_creation_keyboard()
    )

async def handle_travel_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–µ–∑–¥–æ–∫"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if not user_data[user_id].get('title'):
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ
        user_data[user_id]['title'] = text
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏:"
        )
    else:
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ
        user_data[user_id]['text'] = text
        
        keyboard = [
            [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="travel_photo")],
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_travel")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data[user_id]['title']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {text}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "post_photo":
        user_states[user_id] = BotStates.POST_PHOTO
        await query.edit_message_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram:\n\n"
            "–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–∞–π–ª!\n"
            "–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω—ã–º (–≤ –ø—Ä–µ–≤—å—é), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤—è—Ç—Å—è –≤ –≥–∞–ª–µ—Ä–µ—é."
        )
        
    elif data == "post_video":
        user_states[user_id] = BotStates.POST_VIDEO
        await query.edit_message_text(
            "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:"
        )
        
    elif data == "post_youtube":
        user_states[user_id] = BotStates.POST_YOUTUBE
        await query.edit_message_text(
            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ:"
        )
        
    elif data == "post_location":
        user_states[user_id] = BotStates.POST_LOCATION
        await query.edit_message_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã:"
        )
        
    elif data == "travel_photo":
        user_states[user_id] = BotStates.TRAVEL_PHOTO
        await query.edit_message_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–µ–∑–¥–æ–∫:"
        )
        
    elif data == "publish_post":
        await publish_hugo_post(query, user_id, context)
        
    elif data == "save_travel":
        await save_travel_entry(query, user_id, context)
        
    elif data == "calendar_add_monthly":
        user_states[user_id] = BotStates.CALENDAR_ADD_MONTH
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ü–æ–ª—ë—Ç—ã –≤ [–º–µ—Å—è—Ü] [–≥–æ–¥] –≥–æ–¥–∞`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ü–æ–ª—ë—Ç—ã –≤ –æ–∫—Ç—è–±—Ä–µ 2025 –≥–æ–¥–∞\n"
            "‚Ä¢ –ü–æ–ª—ë—Ç—ã –≤ –Ω–æ—è–±—Ä–µ 2025 –≥–æ–¥–∞\n"
            "‚Ä¢ –ü–æ–ª—ë—Ç—ã –≤ –¥–µ–∫–∞–±—Ä–µ 2025 –≥–æ–¥–∞"
        )
        
    elif data == "calendar_add_special":
        user_states[user_id] = BotStates.CALENDAR_ADD_SPECIAL
        await query.edit_message_text(
            "‚ú® **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã –≤ –≥–æ—Ä–∞—Ö\n"
            "‚Ä¢ –ú–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ\n"
            "‚Ä¢ –õ–µ—Ç–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å"
        )
        
    elif data == "calendar_remove":
        await handle_calendar_remove_callback(query, user_id, context)
        
    elif data == "calendar_list":
        await handle_calendar_list_callback(query, user_id, context)
        
    elif data == "back_to_main":
        user_states[user_id] = BotStates.MAIN_MENU
        user_data[user_id] = {}
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await context.bot.send_message(
            chat_id=user_id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        
    elif data == "cancel":
        user_states[user_id] = BotStates.MAIN_MENU
        user_data[user_id] = {}
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await context.bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        
    elif data.startswith("remove_trip_"):
        trip_value = data.replace("remove_trip_", "")
        success = remove_travel_option(trip_value)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º Git –∫–æ–º–º–∏—Ç
            commit_message = f"–£–¥–∞–ª–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∞: {trip_value}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
            git_success, git_message = git_add_commit_push(["content/plan.md"], commit_message)
            
            message = f"‚úÖ –ü–æ–µ–∑–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
            message += f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {trip_value}\n"
            message += f"üí° –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: content/plan.md\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git –æ–ø–µ—Ä–∞—Ü–∏–∏
            if git_success:
                message += f"üîÑ {git_message}"
            else:
                message += f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {git_message}"
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏"
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        
    elif data == "back_to_post":
        await query.edit_message_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
            reply_markup=get_post_creation_keyboard()
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    
    if state == BotStates.POST_PHOTO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if update.message.document:
            photo = update.message.document
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Ö–µ–º–µ Location-YYYYMMDD-N.ext
            current_date = datetime.now()
            file_extension = 'jpg'
            if hasattr(photo, 'file_name') and photo.file_name:
                file_extension = photo.file_name.split('.')[-1].lower()
            
            location = user_data[user_id].get('location', 'Unknown')
            image_number = len(user_data[user_id]['photos']) + 1
            file_name = generate_image_filename(location, current_date, image_number, file_extension)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            image_path = download_telegram_file(photo.file_id, file_name, context)
            
            if image_path:
                user_data[user_id]['photos'].append(image_path)
                
                # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–µ–ª–∞–µ–º –≥–ª–∞–≤–Ω—ã–º
                if not user_data[user_id].get('main_image'):
                    user_data[user_id]['main_image'] = image_path
                    status = "–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–µ–≤—å—é"
                else:
                    status = "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"
                
                await update.message.reply_text(
                    f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ {status}!\n"
                    f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(user_data[user_id]['photos'])}\n"
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}",
                    reply_markup=get_post_creation_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
                    reply_markup=get_post_creation_keyboard()
                )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª/–¥–æ–∫—É–º–µ–Ω—Ç!\n\n"
                "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–§–∞–π–ª'.",
                reply_markup=get_post_creation_keyboard()
            )
        
    elif state == BotStates.TRAVEL_PHOTO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if update.message.document:
            photo = update.message.document
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            file_extension = 'jpg'
            if hasattr(photo, 'file_name') and photo.file_name:
                file_extension = photo.file_name.split('.')[-1].lower()
            
            file_name = f"travel_{timestamp}.{file_extension}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            image_path = download_telegram_file(photo.file_id, file_name, context)
            
            if image_path:
                user_data[user_id]['photo'] = image_path
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_travel")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                ]
                
                await update.message.reply_text(
                    f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª/–¥–æ–∫—É–º–µ–Ω—Ç!\n\n"
                "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–§–∞–π–ª'."
            )

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    
    if state == BotStates.POST_VIDEO:
        video = update.message.video
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Ö–µ–º–µ Location-YYYYMMDD-N.mp4
        current_date = datetime.now()
        location = user_data[user_id].get('location', 'Unknown')
        video_number = len(user_data[user_id]['videos']) + 1
        file_name = generate_image_filename(location, current_date, video_number, 'mp4')
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        video_path = download_telegram_file(video.file_id, file_name, context)
        
        if video_path:
            user_data[user_id]['videos'].append(video_path)
            await update.message.reply_text(
                f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø–æ—Å—Ç—É!\n"
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {video_path}",
                reply_markup=get_post_creation_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ",
                reply_markup=get_post_creation_keyboard()
            )

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = update.effective_user.id
    state = user_states.get(user_id)
    text = update.message.text
    
    if state == BotStates.POST_YOUTUBE:
        user_data[user_id]['youtube_links'].append(text)
        await update.message.reply_text(
            "‚úÖ YouTube —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_post_creation_keyboard()
        )
        
    elif state == BotStates.POST_LOCATION:
        user_data[user_id]['locations'].append(text)
        await update.message.reply_text(
            "‚úÖ –õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_post_creation_keyboard()
        )

async def publish_hugo_post(query, user_id, context):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Hugo"""
    post_data = user_data[user_id].copy()
    
    # –°–æ–∑–¥–∞–µ–º Hugo –ø–æ—Å—Ç
    file_path = create_hugo_post(post_data)
    
    if file_path:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è Git –∫–æ–º–º–∏—Ç–∞
        files_to_commit = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º markdown —Ñ–∞–π–ª –ø–æ—Å—Ç–∞
        relative_post_path = os.path.relpath(file_path, HUGO_PROJECT_PATH)
        files_to_commit.append(relative_post_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ
        for photo_path in post_data.get('photos', []):
            if photo_path.startswith('images/'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
                full_image_path = f"public/{photo_path}"
                files_to_commit.append(full_image_path)
        
        for video_path in post_data.get('videos', []):
            if video_path.startswith('images/'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
                full_video_path = f"public/{video_path}"
                files_to_commit.append(full_video_path)
        
        # –°–æ–∑–¥–∞–µ–º Git –∫–æ–º–º–∏—Ç
        commit_message = f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç: {post_data['title']}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        git_success, git_message = git_add_commit_push(files_to_commit, commit_message)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        message = f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Hugo!\n\n"
        message += f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post_data['title']}\n"
        message += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {post_data['description']}\n"
        message += f"üìÑ –§–∞–π–ª: {os.path.basename(file_path)}\n"
        
        if post_data['photos']:
            message += f"üì∏ –§–æ—Ç–æ: {len(post_data['photos'])} —à—Ç.\n"
        if post_data['videos']:
            message += f"üé• –í–∏–¥–µ–æ: {len(post_data['videos'])} —à—Ç.\n"
        if post_data['youtube_links']:
            message += f"üîó YouTube: {len(post_data['youtube_links'])} —Å—Å—ã–ª–æ–∫\n"
        if post_data['locations']:
            message += f"üìç –õ–æ–∫–∞—Ü–∏–∏: {len(post_data['locations'])} —à—Ç.\n"
        
        message += f"\nüí° –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: content/post/{os.path.basename(file_path)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        if git_success:
            message += f"üîÑ {git_message}"
        else:
            message += f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {git_message}"
        
        await query.edit_message_text(message)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    user_data[user_id] = {}
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def save_travel_entry(query, user_id, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫"""
    travel_data = user_data[user_id].copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–ª–∞–Ω
    success = add_travel_calendar_entry(travel_data)
    
    if success:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è Git –∫–æ–º–º–∏—Ç–∞
        files_to_commit = ["content/plan.md"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if travel_data.get('photo') and travel_data['photo'].startswith('images/'):
            full_image_path = f"public/{travel_data['photo']}"
            files_to_commit.append(full_image_path)
        
        # –°–æ–∑–¥–∞–µ–º Git –∫–æ–º–º–∏—Ç
        commit_message = f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫: {travel_data['title']}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        git_success, git_message = git_add_commit_push(files_to_commit, commit_message)
        
        message = f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫!\n\n"
        message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {travel_data['title']}\n"
        message += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {travel_data['text']}\n"
        
        if travel_data.get('photo'):
            message += f"üì∏ –§–æ—Ç–æ: {travel_data['photo']}\n"
        
        message += f"\nüí° –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: content/plan.md\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        if git_success:
            message += f"üîÑ {git_message}"
        else:
            message += f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {git_message}"
        
        await query.edit_message_text(message)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    user_data[user_id] = {}
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def handle_calendar_add_monthly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ—Å—è—Ü –∏ –≥–æ–¥)
    if not text:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–ª—ë—Ç—ã –≤ –æ–∫—Ç—è–±—Ä–µ 2025 –≥–æ–¥–∞"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –≤ –ø–ª–∞–Ω
    success = add_travel_option(text)
    
    if success:
        # –°–æ–∑–¥–∞–µ–º Git –∫–æ–º–º–∏—Ç
        commit_message = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞: {text}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        git_success, git_message = git_add_commit_push(["content/plan.md"], commit_message)
        
        message = f"‚úÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        message += f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n"
        message += f"üí° –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: content/plan.md\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        if git_success:
            message += f"üîÑ {git_message}"
        else:
            message += f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {git_message}"
        
        await update.message.reply_text(message, reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏",
            reply_markup=get_main_keyboard()
        )
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    user_data[user_id] = {}

async def handle_calendar_add_special(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not text:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã –≤ –≥–æ—Ä–∞—Ö"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –≤ –ø–ª–∞–Ω
    success = add_travel_option(text)
    
    if success:
        # –°–æ–∑–¥–∞–µ–º Git –∫–æ–º–º–∏—Ç
        commit_message = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞: {text}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        git_success, git_message = git_add_commit_push(["content/plan.md"], commit_message)
        
        message = f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        message += f"‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n"
        message += f"üí° –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: content/plan.md\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        if git_success:
            message += f"üîÑ {git_message}"
        else:
            message += f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {git_message}"
        
        await update.message.reply_text(message, reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏",
            reply_markup=get_main_keyboard()
        )
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_states[user_id] = BotStates.MAIN_MENU
    user_data[user_id] = {}

async def handle_calendar_remove_callback(query, user_id, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    options = get_current_travel_options()
    
    if not options:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for value, text in options:
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {text}", 
            callback_data=f"remove_trip_{value}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_calendar_list_callback(query, user_id, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫"""
    options = get_current_travel_options()
    
    if not options:
        message = "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫**\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫"
    else:
        message = "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫**\n\n"
        for i, (value, text) in enumerate(options, 1):
            message += f"{i}. {text}\n"
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]])
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, context: handle_message_by_state(update, context)
    ))
    
    print("ü§ñ Hugo Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìÅ –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {CONTENT_POST_PATH}")
    print(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {PUBLIC_IMAGES_PATH}")
    print(f"üåç –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–µ–∑–¥–æ–∫: {PLAN_FILE_PATH}")
    application.run_polling()

async def handle_message_by_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º"""
    user_id = update.effective_user.id
    state = user_states.get(user_id, BotStates.MAIN_MENU)
    
    if state == BotStates.MAIN_MENU:
        await handle_main_menu(update, context)
    elif state == BotStates.POST_DESCRIPTION:
        await handle_post_description(update, context)
    elif state == BotStates.POST_LOCATION_NAME:
        await handle_post_location_name(update, context)
    elif state == BotStates.POST_TEXT:
        await handle_post_text(update, context)
    elif state == BotStates.TRAVEL_TEXT:
        await handle_travel_text(update, context)
    elif state == BotStates.CALENDAR_ADD_MONTH:
        await handle_calendar_add_monthly(update, context)
    elif state == BotStates.CALENDAR_ADD_SPECIAL:
        await handle_calendar_add_special(update, context)
    elif state in [BotStates.POST_YOUTUBE, BotStates.POST_LOCATION]:
        await handle_text_input(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
        )

if __name__ == '__main__':
    main()