<?php
/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞
 */

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
 */
function load_env_file($file_path = '../.env') {
    if (!file_exists($file_path)) {
        return false;
    }

    $lines = file($file_path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (strpos(trim($line), '#') === 0) {
            continue;
        }

        // –£–±–∏—Ä–∞–µ–º inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–≤—Å—ë –ø–æ—Å–ª–µ #)
        if (strpos($line, '#') !== false) {
            $line = substr($line, 0, strpos($line, '#'));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞–∫ =
        if (strpos($line, '=') === false) {
            continue;
        }

        list($name, $value) = explode('=', $line, 2);
        $name = trim($name);
        $value = trim($value);  // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∑–Ω–∞—á–µ–Ω–∏—è

        if (!array_key_exists($name, $_SERVER) && !array_key_exists($name, $_ENV)) {
            putenv(sprintf('%s=%s', $name, $value));
            $_ENV[$name] = $value;
            $_SERVER[$name] = $value;
        }
    }
    return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º –∏–∑ .env
 */
function get_forms_settings() {
    return [
        'send_email' => getenv('FORMS_SEND_EMAIL') === 'true',
        'send_telegram' => getenv('FORMS_SEND_TELEGRAM') === 'true',
        'save_json' => getenv('FORMS_SAVE_JSON') === 'true',
        'notifications' => getenv('FORMS_NOTIFICATIONS') === 'true',
        'telegram_bot_token' => getenv('TELEGRAM_BOT_TOKEN'),
        'telegram_chat_id' => getenv('TELEGRAM_ADMIN_CHAT_ID'),
        'encryption_key' => getenv('FORMS_ENCRYPTION_KEY') ?: 'default_key_change_me'
    ];
}

/**
 * –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
function encrypt_data($data, $key) {
    $json = json_encode($data, JSON_UNESCAPED_UNICODE);
    $iv = random_bytes(16);
    $encrypted = openssl_encrypt($json, 'AES-256-CBC', hash('sha256', $key), 0, $iv);
    return base64_encode($iv . $encrypted);
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function decrypt_data($encrypted_data, $key) {
    $data = base64_decode($encrypted_data);
    $iv = substr($data, 0, 16);
    $encrypted = substr($data, 16);
    $decrypted = openssl_decrypt($encrypted, 'AES-256-CBC', hash('sha256', $key), 0, $iv);
    return json_decode($decrypted, true);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
 */
function save_application_to_json($form_data, $form_type) {
    $settings = get_forms_settings();
    
    if (!$settings['save_json']) {
        return true; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–Ω–µ –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞)
    $secure_dir = '/var/secure/forms/';
    if (!is_dir($secure_dir)) {
        mkdir($secure_dir, 0700, true);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    $application = [
        'id' => uniqid('app_'),
        'type' => $form_type,
        'timestamp' => date('Y-m-d H:i:s'),
        'data' => $form_data,
        'status' => 'new'
    ];
    
    try {
        // –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        $encrypted_data = encrypt_data($application, $settings['encryption_key']);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        $filename = $secure_dir . $form_type . '_' . date('Y-m-d') . '.json';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        $existing_data = [];
        if (file_exists($filename)) {
            $file_content = file_get_contents($filename);
            if ($file_content) {
                $existing_data = json_decode($file_content, true) ?: [];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        $existing_data[] = [
            'id' => $application['id'],
            'timestamp' => $application['timestamp'],
            'encrypted_data' => $encrypted_data
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_put_contents($filename, json_encode($existing_data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
        chmod($filename, 0600); // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å
        
        return $application['id'];
        
    } catch (Exception $e) {
        error_log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: " . $e->getMessage());
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 */
function send_telegram_notification($form_data, $form_type) {
    $settings = get_forms_settings();
    
    if (!$settings['send_telegram'] || !$settings['notifications']) {
        return true; // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    }
    
    if (empty($settings['telegram_bot_token']) || empty($settings['telegram_chat_id'])) {
        error_log("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        return false;
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $message = "üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n";
    $message .= "üìù *–¢–∏–ø:* " . ($form_type === 'plan' ? '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–µ–∑–¥–∫—É' : '–í–æ–ø—Ä–æ—Å') . "\n";
    $message .= "üë§ *–ò–º—è:* " . $form_data['name'] . "\n";
    $message .= "üìß *Email:* " . $form_data['email'] . "\n";
    
    if ($form_type === 'plan') {
        $message .= "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* " . ($form_data['phone'] ?: '–Ω–µ —É–∫–∞–∑–∞–Ω') . "\n";
        $message .= "‚úàÔ∏è *–ü–æ–µ–∑–¥–∫–∞:* " . ($form_data['trip_period'] ?: '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞') . "\n";
        $message .= "üöÅ *–ë–í–°/–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* " . ($form_data['bvs_number'] ?: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') . "\n";
    } else {
        if (!empty($form_data['telegram'])) {
            $message .= "üì± *Telegram:* " . $form_data['telegram'] . "\n";
        }
        if (!empty($form_data['phone'])) {
            $message .= "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* " . $form_data['phone'] . "\n";
        }
        $message .= "üí¨ *–¢–µ–º–∞:* " . $form_data['subject'] . "\n";
        $message .= "üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* " . substr($form_data['message'], 0, 200) . "...\n";
    }
    
    $message .= "\n‚è∞ *–í—Ä–µ–º—è:* " . date('Y-m-d H:i:s');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $url = "https://api.telegram.org/bot" . $settings['telegram_bot_token'] . "/sendMessage";
    $data = [
        'chat_id' => $settings['telegram_chat_id'],
        'text' => $message,
        'parse_mode' => 'Markdown'
    ];
    
    $context = stream_context_create([
        'http' => [
            'method' => 'POST',
            'header' => 'Content-Type: application/x-www-form-urlencoded',
            'content' => http_build_query($data)
        ]
    ]);
    
    try {
        $result = file_get_contents($url, false, $context);
        $response = json_decode($result, true);
        
        if ($response && $response['ok']) {
            return true;
        } else {
            error_log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: " . $result);
            return false;
        }
    } catch (Exception $e) {
        error_log("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: " . $e->getMessage());
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è Telegram –±–æ—Ç–∞)
 */
function get_all_applications() {
    $settings = get_forms_settings();
    $secure_dir = '/var/secure/forms/';
    
    if (!is_dir($secure_dir)) {
        return [];
    }
    
    $applications = [];
    $files = glob($secure_dir . '*.json');
    
    foreach ($files as $file) {
        $file_content = file_get_contents($file);
        if (!$file_content) continue;
        
        $file_data = json_decode($file_content, true);
        if (!$file_data) continue;
        
        foreach ($file_data as $item) {
            try {
                $decrypted = decrypt_data($item['encrypted_data'], $settings['encryption_key']);
                $applications[] = $decrypted;
            } catch (Exception $e) {
                error_log("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∑–∞—è–≤–∫–∏: " . $e->getMessage());
            }
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    usort($applications, function($a, $b) {
        return strtotime($b['timestamp']) - strtotime($a['timestamp']);
    });
    
    return $applications;
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é
 */
function mark_application_as_reviewed($app_id) {
    $settings = get_forms_settings();
    $secure_dir = '/var/secure/forms/';
    $files = glob($secure_dir . '*.json');
    
    foreach ($files as $file) {
        $file_content = file_get_contents($file);
        if (!$file_content) continue;
        
        $file_data = json_decode($file_content, true);
        if (!$file_data) continue;
        
        $updated = false;
        foreach ($file_data as &$item) {
            try {
                $decrypted = decrypt_data($item['encrypted_data'], $settings['encryption_key']);
                if ($decrypted['id'] === $app_id) {
                    $decrypted['status'] = 'reviewed';
                    $item['encrypted_data'] = encrypt_data($decrypted, $settings['encryption_key']);
                    $updated = true;
                    break;
                }
            } catch (Exception $e) {
                continue;
            }
        }
        
        if ($updated) {
            file_put_contents($file, json_encode($file_data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
            return true;
        }
    }
    
    return false;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
 */
function cleanup_old_applications() {
    $secure_dir = '/var/secure/forms/';
    if (!is_dir($secure_dir)) return;
    
    $files = glob($secure_dir . '*.json');
    $cutoff_date = strtotime('-30 days');
    
    foreach ($files as $file) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if (preg_match('/(\d{4}-\d{2}-\d{2})\.json$/', $file, $matches)) {
            $file_date = strtotime($matches[1]);
            if ($file_date < $cutoff_date) {
                unlink($file);
                error_log("–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∑–∞—è–≤–æ–∫: " . basename($file));
            }
        }
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ñ–æ—Ä–º–∞–º)
if (rand(1, 100) === 1) { // 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    cleanup_old_applications();
}
?>