/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –∫–∞—Ä—Ç–æ—á–∫–∏
 */

class UpcomingTripsLoader {
    constructor(containerId = 'trips-grid', jsonPath = '/data/upcoming-trips.json') {
        this.containerId = containerId;
        this.jsonPath = jsonPath;
        this.tripsData = null;
    }

    async loadTripsData() {
        try {
            const response = await fetch(this.jsonPath);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            this.tripsData = await response.json();
            return this.tripsData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫:', error);
            return null;
        }
    }

    generateTripCard(trip) {
        const metaHtml = trip.meta ? trip.meta.map(meta => 
            `<span>${meta}</span>`
        ).join('') : '';

        return `
            <div class="trip-card" data-value="${trip.title}">
                <div class="trip-image">
                    <img src="${trip.image}" alt="${trip.title}" loading="lazy">
                    <div class="trip-overlay">
                        <span class="trip-period">${trip.period}</span>
                    </div>
                </div>
                <div class="trip-content">
                    <h3>${trip.title}</h3>
                    <div class="trip-details">
                        <p>${trip.description}</p>
                        <div class="trip-meta">
                            ${metaHtml}
                        </div>
                    </div>
                    <!-- –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∫–∏ —É–±—Ä–∞–Ω–∞ - dropdown –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>
        `;
    }

    async renderTrips() {
        const container = document.getElementById(this.containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ID "${this.containerId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–µ–∑–¥–æ–∫...</div>';

        const data = await this.loadTripsData();
        if (!data || !data.trips) {
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫</div>';
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        const activeTrips = data.trips
            .filter(trip => trip.active === true)
            .sort((a, b) => (a.order || 0) - (b.order || 0));

        if (activeTrips.length === 0) {
            container.innerHTML = '<div class="no-trips">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫</div>';
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
        const tripsHtml = activeTrips.map(trip => this.generateTripCard(trip)).join('');
        container.innerHTML = tripsHtml;

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${activeTrips.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
    async refresh() {
        await this.renderTrips();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ
    getTripById(id) {
        if (!this.tripsData || !this.tripsData.trips) return null;
        return this.tripsData.trips.find(trip => trip.id === id);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
    getActiveTrips() {
        if (!this.tripsData || !this.tripsData.trips) return [];
        return this.tripsData.trips.filter(trip => trip.active === true);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑—á–∏–∫—É
let upcomingTripsLoader;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–µ–∑–¥–æ–∫
    const tripsContainer = document.getElementById('trips-grid');
    if (tripsContainer) {
        upcomingTripsLoader = new UpcomingTripsLoader();
        upcomingTripsLoader.renderTrips();
        
        console.log('üóìÔ∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑–≤–Ω–µ)
function refreshUpcomingTrips() {
    if (upcomingTripsLoader) {
        upcomingTripsLoader.refresh();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UpcomingTripsLoader;
}