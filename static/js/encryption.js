/**
 * Client-side —Ñ–∞–π–ª–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º
 * –®–∏—Ñ—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
 */

class FileEncryption {
    constructor() {
        this.masterKey = 'sleeptrip_secure_key_2025'; // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π
        this.encryptedFiles = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
     */
    async generateKey(password, salt) {
        const encoder = new TextEncoder();
        const keyMaterial = await crypto.subtle.importKey(
            'raw',
            encoder.encode(password),
            'PBKDF2',
            false,
            ['deriveKey']
        );

        return crypto.subtle.deriveKey(
            {
                name: 'PBKDF2',
                salt: salt,
                iterations: 100000,
                hash: 'SHA-256'
            },
            keyMaterial,
            {
                name: 'AES-GCM',
                length: 256
            },
            false,
            ['encrypt', 'decrypt']
        );
    }

    /**
     * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async encryptFile(file) {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ IV
            const salt = crypto.getRandomValues(new Uint8Array(16));
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
            const key = await this.generateKey(this.masterKey, salt);
            
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            const fileBuffer = await file.arrayBuffer();
            
            // –®–∏—Ñ—Ä—É–µ–º
            const encryptedData = await crypto.subtle.encrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                key,
                fileBuffer
            );

            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = {
                fileName: file.name,
                fileType: file.type,
                fileSize: file.size,
                encryptedAt: new Date().toISOString(),
                salt: Array.from(salt),
                iv: Array.from(iv)
            };

            // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const metadataStr = JSON.stringify(metadata);
            const metadataBytes = new TextEncoder().encode(metadataStr);
            const metadataLength = new Uint32Array([metadataBytes.length]);
            
            const result = new Uint8Array(
                4 + metadataBytes.length + encryptedData.byteLength
            );
            
            result.set(new Uint8Array(metadataLength.buffer), 0);
            result.set(metadataBytes, 4);
            result.set(new Uint8Array(encryptedData), 4 + metadataBytes.length);

            return {
                encryptedData: result,
                metadata: metadata,
                originalName: file.name
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è input —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    initFileInput(inputId) {
        const input = document.getElementById(inputId);
        const wrapper = input.closest('.file-input-wrapper');
        const textElement = wrapper.querySelector('.file-input-text');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        let statusDiv = wrapper.parentElement.querySelector('.encryption-status');
        if (!statusDiv) {
            statusDiv = document.createElement('div');
            statusDiv.className = 'encryption-status';
            wrapper.parentElement.appendChild(statusDiv);
        }

        input.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                this.showEncryptionStatus(statusDiv, 'encrypting', '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...');
                textElement.textContent = `–®–∏—Ñ—Ä—É—é: ${file.name}`;
                textElement.className = 'file-input-text file-selected';

                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                await new Promise(resolve => setTimeout(resolve, 500));

                // –®–∏—Ñ—Ä—É–µ–º —Ñ–∞–π–ª
                const encryptedFile = await this.encryptFile(file);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                this.encryptedFiles.set(inputId, encryptedFile);

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                textElement.textContent = `${encryptedFile.originalName} (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)`;
                textElement.className = 'file-input-text file-encrypted';
                wrapper.classList.add('file-encrypted');

                this.showEncryptionStatus(statusDiv, 'encrypted', '‚úÖ –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');

                // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                this.createHiddenEncryptedField(input.form, inputId, encryptedFile);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
                this.showEncryptionStatus(statusDiv, 'error', '‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞');
                textElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
                textElement.className = 'file-input-text';
                wrapper.classList.remove('file-encrypted');
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
     */
    showEncryptionStatus(statusDiv, type, message) {
        statusDiv.className = `encryption-status ${type}`;
        
        if (type === 'encrypting') {
            statusDiv.innerHTML = `
                <span class="encrypting-spinner"></span>
                ${message}
            `;
        } else {
            statusDiv.textContent = message;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    createHiddenEncryptedField(form, inputId, encryptedFile) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingField = form.querySelector(`input[name="${inputId}_encrypted"]`);
        if (existingField) {
            existingField.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
        const hiddenField = document.createElement('input');
        hiddenField.type = 'hidden';
        hiddenField.name = `${inputId}_encrypted`;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
        const base64Data = btoa(String.fromCharCode(...encryptedFile.encryptedData));
        hiddenField.value = base64Data;
        
        form.appendChild(hiddenField);

        // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const metadataField = document.createElement('input');
        metadataField.type = 'hidden';
        metadataField.name = `${inputId}_metadata`;
        metadataField.value = JSON.stringify(encryptedFile.metadata);
        
        form.appendChild(metadataField);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ ID
     */
    getEncryptedFile(inputId) {
        return this.encryptedFiles.get(inputId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã
     */
    validateEncryptedFiles(form) {
        const fileInputs = form.querySelectorAll('input[type="file"]');
        const encryptedFields = form.querySelectorAll('input[name$="_encrypted"]');
        
        for (let input of fileInputs) {
            if (input.files.length > 0) {
                const encryptedField = form.querySelector(`input[name="${input.id}_encrypted"]`);
                if (!encryptedField || !encryptedField.value) {
                    alert('–ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.');
                    return false;
                }
            }
        }
        return true;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebCrypto
    if (!window.crypto || !window.crypto.subtle) {
        console.error('‚ùå WebCrypto API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.');
        return;
    }
    
    const encryption = new FileEncryption();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ file input —ç–ª–µ–º–µ–Ω—Ç—ã
    const fileInputs = document.querySelectorAll('input[type="file"]');
    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${fileInputs.length} —Ñ–∞–π–ª–æ–≤—ã—Ö input —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    fileInputs.forEach((input, index) => {
        if (input.id) {
            console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è: ${input.id}`);
            encryption.initFileInput(input.id);
        } else {
            console.warn(`‚ö†Ô∏è File input ${index} –Ω–µ –∏–º–µ–µ—Ç ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫ —Ñ–æ—Ä–º–∞–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
            if (!encryption.validateEncryptedFiles(form)) {
                event.preventDefault();
                return false;
            }
        });
    });
    
    // –î–µ–ª–∞–µ–º encryption –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.fileEncryption = encryption;
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});